{"version":3,"sources":["components/input-search/input-search.jsx","components/movie-card/movie-card.jsx","components/movie-list/movie-list.jsx","App.js","serviceWorker.js","index.js"],"names":["InputSearch","actionToPerform","this","props","className","type","onChange","ev","currentTarget","value","nextElementSibling","click","onKeyUp","keyCode","onClick","buttonName","React","Component","MovieCard","cardSelected","id","movie","imdbID","Title","src","Poster","alt","MovieList","list","map","key","App","state","favorites","getMovies","bind","inputValue","previousElementSibling","fetch","then","response","json","result","Search","length","setState","newFav","searchById","isAlreadyInFavs","favoritesCopy","Object","assign","splice","indexOf","alert","arr","elem","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d1c0603.chunk.js","sourcesContent":["import React from 'react';\r\nimport './input-search.css';\r\n\r\nclass  InputSearch extends React.Component {\r\n\r\n    render() { \r\n        const {actionToPerform } = this.props;\r\n        \r\n        return (  \r\n            <div className=\"input-search\">\r\n                <h1>Input Search</h1>\r\n                <input type=\"text\"  onChange={ev => {if(ev.currentTarget.value === 'N/A'){ ev.currentTarget.nextElementSibling.click()}}} onKeyUp={ev => {if(ev.keyCode === 13){ ev.currentTarget.nextElementSibling.click()}}}></input>\r\n                <button type=\"button\" onClick={actionToPerform}>{ this.props.buttonName }</button>\r\n            </div> \r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default InputSearch;\r\n","import React from 'react';\r\nimport './movie-card.css';\r\n\r\nclass  MovieCard extends React.Component {\r\n\r\n  render() { \r\n    const {cardSelected } = this.props;\r\n      return (  \r\n          <div id={this.props.movie.imdbID} className=\"movie-card\" onClick={cardSelected}>\r\n            <p>{this.props.movie.Title}</p>\r\n            <img src={this.props.movie.Poster !== 'N/A' ? this.props.movie.Poster : '../../assets/images/no-image.jpg'} alt=\"Movie\" ></img>\r\n          </div> \r\n      );\r\n  }\r\n}\r\n \r\nexport default MovieCard;","import React from 'react';\r\nimport './movie-list.css';\r\nimport MovieCard from '../movie-card/movie-card.jsx'\r\n\r\nclass MovieList extends React.Component {\r\n\r\n render(){\r\n    const {cardSelected } = this.props;\r\n     return (\r\n         <div className=\"card-container\">\r\n            { this.props.list.map(movie => \r\n                <MovieCard key={movie.imdbID} movie={movie} cardSelected={ cardSelected }></MovieCard>\r\n            )}\r\n         </div>\r\n     )\r\n };\r\n\r\n}\r\n\r\nexport default MovieList;","import React from 'react';\nimport './App.css';\nimport InputSearch from './components/input-search/input-search.jsx';\nimport MovieList from './components/movie-list/movie-list.jsx';\n\n\nclass  App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      list: [],\n      favorites: []\n    }\n    this.getMovies = this.getMovies.bind(this);\n    this.cardSelected = this.cardSelected.bind(this);\n\n  }\n\n  // componentDidMount(){};\n\n  render() { \n    const { getMovies } = this;\n    const { cardSelected } = this;\n\n    return (\n      <div className=\"App\">\n          <InputSearch buttonName={'busca'} actionToPerform={ getMovies }></InputSearch>\n          <main>\n            <aside className=\"aside\">\n              <MovieList list={this.state.favorites} cardSelected={ cardSelected }></MovieList>\n            </aside>\n            <section className=\"section\">\n              <MovieList list={this.state.list}  cardSelected={ cardSelected }></MovieList>\n            </section>\n          </main>\n      </div>\n    );\n  }\n\n\n  getMovies(ev){    \n    const inputValue = ev.currentTarget.previousElementSibling.value; \n    const page = 1;\n    const type = 'movie'; // movie, series, episode\n    fetch(`https://www.omdbapi.com/?s=${inputValue}&plot=full&apikey=e477ed6a&page=${page}&type=${type}`)\n    .then(response => {\n      return response.json();\n    }).then(result => {\n      if(result.Search && result.Search.length > 0){\n        this.setState({list: result.Search});    \n      }else{\n        this.setState({list: []});    \n      }\n    });\n  }\n\n  cardSelected(ev){\n    const id = ev.currentTarget.id;\n    const newFav = this.searchById(id,this.state.list);\n    const isAlreadyInFavs = this.searchById(id,this.state.favorites);\n    \n    if(newFav){\n      if(!isAlreadyInFavs){\n        this.setState({favorites: [...this.state.favorites,newFav] }) \n      }else{\n        const favoritesCopy = Object.assign([],this.state.favorites);\n        favoritesCopy.splice(favoritesCopy.indexOf(newFav),1);\n        this.setState({favorites: [...favoritesCopy] }) \n      }\n    }else{\n      alert('ERROR');\n    }\n  }\n\n  searchById(id,arr){\n    for(const elem of arr){\n      if(elem && elem.imdbID.toString() === id.toString()){\n        return elem;\n      }\n    }\n    return null;\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}